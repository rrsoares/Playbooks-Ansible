hosts: cobaia
  become: true
  become_user: root
  serial: 1 #one host at a time
  tasks:
    
    #make sure that the first host is the utility server
#    - name: Getting the local repository ready 
#      run_once: true
#      shell: |  
  
    # do an "apt-get update", to ensure latest package lists
#    - name: apt-get update
#      apt: 
#        update_cache: yes 
#        force_apt_get: yes 
#        cache_valid_time: 3600
#      changed_when: 0

#     get a list of packages that have updates
#    - name: get list of pending upgrades
#      command: apt-get --simulate dist-upgrade
#      args:
#        warn: false # don't warn us about apt having its own plugin
#      register: apt_simulate
#      changed_when: 0

    # pick out list of pending updates from command output. This essentially
    # takes the above output from "apt-get --simulate dist-upgrade", and
#    - name: parse apt-get output to get list of changed packages
#      set_fact:
#        updates: '{{ apt_simulate.stdout_lines | select("match", "^Inst ") | list | list | sort }}'
#      changed_when: 0
      
#    - name: show pending updates
#     debug:
#        var: updates
#      when: updates.0 is defined
      

#    # save the list of packages being updated
#    - name: Save pending updates
#      local_action: copy content={{ updates }} dest=/root/{{ ansible_hostname }}-{{ ansible_date_time.date }}-{{ ansible_date_time.time }}-updated-packages.log
#      when: updates.0 is defined
     
   - name: Upgrade packages
      apt:
       upgrade: yes
       force_apt_get: yes
       dpkg_options: "force-confdef,force-confold"

    # cheking the file to know if rebooted is needed
    - name: Check if a reboot is needed
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_md5=no

    - name: Reboot the box if kernel updated
      reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      #when: reboot_required_file.stat.exists
      
       # wait 1 minute between hosts, unless we're on the last
    - name: waiting between hosts
      pause:
        minutes: 1
      when: inventory_hostname != ansible_play_hosts[-1]
